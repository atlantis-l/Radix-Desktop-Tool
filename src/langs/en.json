{
  "Network": {
    "mainnet": "Mainnet",
    "stokenet": "Stokenet"
  },
  "Menu": {
    "StartToUse": {
      "title": "Start To Use"
    },
    "TokenTransfer": {
      "title": "Token Transfer",
      "multipleToMultiple": "Multiple To Multiple",
      "singleToMultiple": "Single To Multiple",
      "multipleToSingle": "Multiple To Single"
    },
    "EntityCheck": {
      "title": "Entity Check"
    },
    "HistoryCheck": {
      "title": "History Check"
    },
    "WalletGenerate": {
      "title": "Wallet Generate"
    },
    "TokenCreate": {
      "title": "Token Create"
    },
    "ManifestExecute": {
      "title": "Manifest Execute"
    },
    "PackageDeploy": {
      "title": "Package Deploy"
    },
    "AddressQRCode": {
      "title": "Address QRCode"
    },
    "XRDFaucet": {
      "title": "XRD Faucet"
    },
    "LocalSettings": {
      "title": "Local Settings"
    }
  },
  "View": {
    "StartToUse": {
      "message": "Hello World!"
    },
    "TokenTransfer": {
      "MultipleToMultiple": {
        "template": {
          "feePayerModal": {
            "title": "Payer Wallet",
            "addonBefore": "Private Key",
            "placeholder": "Use private key to generate Radix address"
          },
          "confirmTransactionModal": {
            "title": "Transaction Send Confirmation",
            "addonBefore": "Text Message",
            "placeholder": "On-chain text message (optional)"
          },
          "senderModal": {
            "title": "Sender Wallet",
            "addonBefore": "Private Key",
            "placeholder": "Use private key to generate Radix address"
          },
          "selectTokenModal": {
            "title": "Select Token",
            "placeholder1": "Select Tokens",
            "placeholder2": "Select NFT IDs"
          },
          "header": {
            "feePayer": {
              "addonBefore": "Fee Payer",
              "feePayerAddress": "Fee Payer Address",
              "placeholder": "Transaction Fee Payment Wallet"
            },
            "feeLock": {
              "addonBefore": "Fee Lock",
              "placeholder": "Transaction Fee",
              "tooltip": "Appropriate increases must be made based on the estimated fees to ensure successful transactions"
            },
            "estimateFee": {
              "button": "Estimate Fee"
            },
            "addTransfer": {
              "button": "Add Transfer"
            },
            "clearAll": {
              "button": "Clear Transfer"
            },
            "feePayerXrdBalance": {
              "tooltip": "Click to refresh balance",
              "addonBefore": "Balance",
              "placeholder": "Fee Payer XRD Balance"
            },
            "sendTransaction": {
              "button": "Send Transaction"
            }
          },
          "divider": {
            "text": "Transfer List"
          },
          "content": {
            "sender": {
              "address": "Sender address",
              "addonBefore": "Sender",
              "placeholder": "Sender wallet"
            },
            "selectToken": {
              "tooltip": "Select Token"
            },
            "receiver": {
              "addonBefore": "Receiver",
              "placeholder": "Receiver address"
            },
            "deleteBtn": {
              "tooltip": "Delete"
            }
          }
        },
        "script": {
          "mounted": {
            "ftLabel": "Fungible Token",
            "nftLabel": "NonFungible Token"
          },
          "methods": {
            "setSender": {
              "loading": "Token information is being obtained",
              "success": "Token information has been obtained",
              "error": "Failed to obtain token information",
              "pkError": "Private Key format does not match"
            },
            "setFeePayer": {
              "pkError": "Private Key format does not match"
            },
            "sendTransaction": {
              "error": "Transaction sending failed",
              "loading": "Transaction is being sent",
              "warning": "Repeat sending transaction",
              "success": "Transaction sent completed"
            },
            "previewTransaction": {
              "loading": "Simulated trading in progress",
              "error": "Simulated transaction failed",
              "success": "Simulated transaction successful",
              "exceed": "Exceeded the limit number of different senders"
            },
            "checkTx": {
              "loading": "Waiting for transaction to complete",
              "success": "Transaction successful",
              "error": "Transaction failed"
            },
            "getXrdBalance": {
              "loading": "XRD balance is being obtained",
              "success": "XRD balance has been refreshed"
            },
            "activateSelectTokenModal": {
              "unnamedToken": "Unnamed Token",
              "balance": "Balance",
              "amount": "Amount",
              "address": "Address"
            }
          }
        }
      },
      "SingleToMultiple": {
        "script": {
          "disableSimTx": "Disable Tx simulation",
          "enableSimTx": "Enable Tx Simulation",
          "noPreviewFee": "Unestimated Fee"
        },
        "template": {
          "content": {
            "amount": "Amount",
            "amountPlaceholder": "Number of tokens",
            "amountTip": "Optional (If not filled in, the imported data will prevail)",
            "token": "Token",
            "tokenAddress": "Token Address",
            "tokenTip": "Only fungible tokens can be sent",
            "totalTokenAmount": "Total amount of tokens sent",
            "walletAmount": "Number of wallets"
          },
          "divider": {
            "text": "Transfer Information"
          },
          "header": {
            "dataNotValid": "Incomplete information input",
            "importWallets": {
              "button": "Import Wallet"
            },
            "simTx": "Whether to perform transaction simulation when sending transaction"
          },
          "modal": {
            "transactionProgress": "Transaction Progress"
          }
        }
      },
      "MultipleToSingle": {
        "template": {
          "content": {
            "amountTip": "Optional (If left blank, all will be sent)",
            "receiver": {
              "addonBefore": "Receiver",
              "placeholder": "Receiver Wallet"
            }
          }
        }
      }
    },
    "HistoryCheck": {
      "template": {
        "header": {
          "input": {
            "addonBefore": "Address",
            "placeholder": "Enter the address to be checked"
          },
          "perPage": "/ Page",
          "previous": "Previous",
          "next": "Next"
        },
        "divider": {
          "text": "Transaction List"
        },
        "content": {
          "message": "Message"
        },
        "modal": {
          "deposit": "Deposit",
          "title": "Asset Changes",
          "txFee": "Transaction Fee",
          "withdraw": "Withdraw",
          "newEntities": "Created Entities"
        }
      },
      "script": {
        "noNext": "Reached last page",
        "noPrevious": "Reached first page",
        "getTxList": "Getting transaction list",
        "gotTxList": "Transaction list obtained",
        "txListError": "Transaction list request failed",
        "copied": "Copied",
        "getTxInfo": "Retrieving transaction information",
        "getTxInfoError": "Failed to obtain transaction information",
        "gotTxInfo": "Transaction information has been obtained"
      }
    },
    "WalletGenerate": {
      "script": {
        "address": "Address",
        "error": "Input error",
        "fileName": "Wallet",
        "privateKey": "Private Key"
      },
      "template": {
        "amount": "Wallet Amount",
        "create": "Generate",
        "placeholder": "Integer"
      }
    },
    "TokenCreate": {
      "message": "Token Create",
      "template": {
        "header": {
          "tokenTypeSelect": {
            "fungibleToken": "Fungible Token",
            "nonFungibleToken": "NonFungible Token"
          },
          "settingsMode": {
            "simple": "Simple",
            "detailed": "Detailed"
          }
        },
        "content": {
          "divider": {
            "metadata": "Metadata",
            "authRoles": "Roles Auth",
            "nftFields": "NFT Fields"
          },
          "divisiblePrecision": "Divisible Precision",
          "divisiblePrecisionDecimal": "Decimal places (0 ~ 18)",
          "iconUrl": "Icon Link",
          "iconUrlPlaceholder": "URL",
          "infoUrl": "Info Link",
          "infoUrlPlaceholder": "URL",
          "initialSupply": "Initial Supply",
          "initialSupplyPlaceholder": "Total initial minting amount",
          "tokenDescription": "Description",
          "tokenName": "Name",
          "tokenNamePlaceholder": "E.g. Radix (Max 32 characters)",
          "tokenSymbol": "Symbol",
          "tokenSymbolPlaceholder": "E.g. XRD (Max 5 characters)",
          "tokenTags": "Tags",
          "tokenTagsPlaceholder": "Separate tags with commas",
          "tokenDescriptionPlaceholder": "Maximum 256 characters",
          "ownerRole": "Owner",
          "nftFieldsInput": {
            "placeholder": "Separate fields with commas"
          },
          "nftList": "NFT List",
          "addNft": "Add"
        },
        "divider": {
          "text": "Token Supply"
        }
      },
      "script": {
        "denyAll": "Deny All",
        "burner": "Burn",
        "burnerUpdater": "Update Burner",
        "depositor": "Deposit",
        "depositorUpdater": "Update Depositor",
        "freezer": "Freeze",
        "freezerUpdater": "Update Freezer",
        "metadataSetter": "Set Metadata",
        "metadataSetterUpdater": "Update Metadata Setter",
        "metadatalocker": "Lock Metadata",
        "metadatalockerUpdater": "Update Metadata Locker",
        "minter": "Mint",
        "minterUpdater": "Update Minter",
        "nftDataSetter": "Set NFT Data",
        "nftDataSetterUpdater": "Update NFT Data Setter",
        "recaller": "Recall",
        "recallerUpdater": "Update Recaller",
        "withdrawer": "Withdraw",
        "withdrawerUpdater": "Update Withdrawer",
        "string": "String"
      }
    },
    "ManifestExecute": {
      "message": "Manifest Execute",
      "template": {
        "divider": {
          "text": "Transaction Manifest"
        },
        "content": {
          "textarea": {
            "placeholder": "Manifest Content"
          }
        },
        "header": {
          "importManifest": "Import Manifest"
        }
      },
      "script": {
        "feeLockCode": "CALL_METHOD\n    Address(\"{0}\")\n    \"lock_fee\"\n    Decimal(\"{1}\")\n;",
        "manifestParsedFailed": "Transaction Manifest parsing failed",
        "needImportWalletFile": "Need to import wallet file"
      }
    },
    "PackageDeploy": {
      "template": {
        "divider": {
          "text": "Deploy Files"
        },
        "content": {
          "deployer": "Deployer",
          "uploadRpd": "Click or drag to upload RPD File",
          "uploadWasm": "Click or drag to upload WASM File",
          "nftOwner": "Accounts with the following NFT",
          "resourceOwner": "Accounts with the following resource",
          "owner": "Who is the owner?",
          "canBeChanged": "Can be changed",
          "cannotBeChanged": "Can't be changed"
        },
        "header": {
          "lock": "Lock (Can't be changed)",
          "select": {
            "0": "Allow All",
            "1": "Specify Resource",
            "2": "Specify NFT",
            "3": "No Owner",
            "tooltip": {
              "1": "The account that owns the resource",
              "2": "The account that owns the NFT"
            }
          },
          "switch": {
            "text": "Whether to specify ownership (default ownership belongs to the deployer)"
          }
        },
        "modal": {
          "resourceAddress": "Resource Address"
        }
      },
      "script": {
        "fileError": "File format error"
      }
    },
    "XRDFaucet": {
      "message": "XRD Faucet",
      "template": {
        "alert": {
          "message": "The XRD received is stokenet token, which can only be used for testing"
        },
        "address": "Receiving Address",
        "stokenetAddress": "Stokenet Address",
        "requestTimes": "Number of requests",
        "getXRD": "Get XRD",
        "tooltip": {
          "requestTimes": "Get 10,000 XRD per request, change the number of requests to get the desired amount"
        },
        "xrdBalance": "XRD Balance",
        "requestCount": "Request Count",
        "requestXrdAmount": "Required XRD Amount"
      },
      "script": {
        "loading": "Obtaining XRD",
        "success": "XRD has been obtained"
      }
    },
    "LocalSettings": {
      "template": {
        "button": {
          "restore": "Restore"
        },
        "gateway": "Gateway",
        "language": "Language (语言)",
        "currentLanguage": "Current Language"
      }
    },
    "AddressQRCode": {
      "template": {
        "input": {
          "addonbefore": "Address",
          "placeholder": "Enter Address"
        }
      }
    },
    "EntityCheck": {
      "template": {
        "divider": {
          "text": "Entity Data"
        }
      },
      "script": {
        "message": {
          "loading": "Getting data",
          "success": "Data acquisition completed",
          "error": "Data acquisition failed"
        }
      }
    }
  },
  "1-info-resourceaddress-templabel-info-ids-join": "1:{0}:{1}:{2}",
  "current-language-english": "Current Language:「English」",
  "dang-qian-yu-yan-zhong-wen": "Current language: \"Chinese\"",
  "menu-string-array-toreversed-pop-name-string-location-name": "Menu.{0}.{1}"
}
